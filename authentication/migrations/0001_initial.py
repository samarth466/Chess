# Generated by Django 3.2.4 on 2021-06-23 04:03

import authentication.fields
import authentication.validators
import datetime
import django.contrib.auth.models
import django.contrib.auth.password_validation
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0014_auto_20201126_2338'),
        ('tournaments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', authentication.fields.PasswordField(max_length=30, validators=[django.contrib.auth.password_validation.MinimumLengthValidator, django.contrib.auth.password_validation.UserAttributeSimilarityValidator, django.contrib.auth.password_validation.CommonPasswordValidator, django.contrib.auth.password_validation.NumericPasswordValidator])),
                ('birth_date', authentication.fields.DateField(date=datetime.date(2021, 1, 1), null=True)),
                ('logged_in', models.BooleanField(default=False)),
                ('security_pin', models.CharField(default=None, max_length=20, null=True, unique=True, validators=[authentication.validators.validate_isnumeric])),
                ('current_page', models.URLField(default='authentication/', verbose_name='current_page')),
                ('account_type', models.TextField(choices=[('ST', 'Student'), ('TR', 'Teacher'), ('PT', 'Parent'), ('PL', 'Personal')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('room', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='members', to='tournaments.room')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
